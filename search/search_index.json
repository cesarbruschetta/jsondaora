{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dataclassjson Interoperates @dataclass with json objects Documentation : https://dutradda.github.io/dataclassjson Source Code : https://github.com/dutradda/dataclassjson Key Features Full compatibility with all functions of dataclasses module Optional input typecasting Direct json serialization with orjson (don't convert to dict before serialization) Supports custom serialization Requirements Python 3.7+ orjson Instalation $ pip install dataclassjson Basic example from dataclassjson import asjson , dataclass @dataclass class Music : name : str @dataclass class Person : name : str age : int music : Music person = Person ( b 'John' , age = '40' , music = dict ( name = 'Imagine' ) ) print ( asjson ( person )) '{\"name\":\"John\",\"age\":40,\"music\":{\"name\":\"Imagine\"}}' Example for disable typecasting from dataclasses import asdict from dataclassjson import dataclass @dataclass class Music : __cast_fields__ = None name : str @dataclass class Person : __cast_fields__ = None name : str age : int music : Music person = Person ( b 'John' , age = '40' , music = dict ( name = b 'Imagine' ) ) # if we use the 'asjson' function will raise error for invalid bytes type print ( asdict ( person )) { 'name':b'John', 'age':'40', 'music':{ 'name':b'Imagine' } } Example for choose fields to typecasting from dataclassjson import asjson , dataclass @dataclass class Music : name : str @dataclass class Person : __cast_fields__ = ( 'name' ,) name : str age : int music : Music person = Person ( b 'John' , age = '40' , music = dict ( name = 'Imagine' ) ) print ( asjson ( person )) '{\"name\":\"John\",\"age\":\"40\",\"music\":{\"name\":\"Imagine\"}}' Example for skip fields to recurse from dataclassjson import asjson , dataclass @dataclass class Music : name : str @dataclass class Person : __skip_recursion__ = ( 'music' ,) name : str age : int music : Music person = Person ( 'John' , age = 40 , music = dict ( name = 'Imagine' ) ) print ( person ) print ( asjson ( person )) Person( 'John', age=40, music=Music(name='Imagine') ) '{\"name\":\"John\",\"age\":40}'","title":"dataclassjson"},{"location":"#dataclassjson","text":"Interoperates @dataclass with json objects Documentation : https://dutradda.github.io/dataclassjson Source Code : https://github.com/dutradda/dataclassjson","title":"dataclassjson"},{"location":"#key-features","text":"Full compatibility with all functions of dataclasses module Optional input typecasting Direct json serialization with orjson (don't convert to dict before serialization) Supports custom serialization","title":"Key Features"},{"location":"#requirements","text":"Python 3.7+ orjson","title":"Requirements"},{"location":"#instalation","text":"$ pip install dataclassjson","title":"Instalation"},{"location":"#basic-example","text":"from dataclassjson import asjson , dataclass @dataclass class Music : name : str @dataclass class Person : name : str age : int music : Music person = Person ( b 'John' , age = '40' , music = dict ( name = 'Imagine' ) ) print ( asjson ( person )) '{\"name\":\"John\",\"age\":40,\"music\":{\"name\":\"Imagine\"}}'","title":"Basic example"},{"location":"#example-for-disable-typecasting","text":"from dataclasses import asdict from dataclassjson import dataclass @dataclass class Music : __cast_fields__ = None name : str @dataclass class Person : __cast_fields__ = None name : str age : int music : Music person = Person ( b 'John' , age = '40' , music = dict ( name = b 'Imagine' ) ) # if we use the 'asjson' function will raise error for invalid bytes type print ( asdict ( person )) { 'name':b'John', 'age':'40', 'music':{ 'name':b'Imagine' } }","title":"Example for disable typecasting"},{"location":"#example-for-choose-fields-to-typecasting","text":"from dataclassjson import asjson , dataclass @dataclass class Music : name : str @dataclass class Person : __cast_fields__ = ( 'name' ,) name : str age : int music : Music person = Person ( b 'John' , age = '40' , music = dict ( name = 'Imagine' ) ) print ( asjson ( person )) '{\"name\":\"John\",\"age\":\"40\",\"music\":{\"name\":\"Imagine\"}}'","title":"Example for choose fields to typecasting"},{"location":"#example-for-skip-fields-to-recurse","text":"from dataclassjson import asjson , dataclass @dataclass class Music : name : str @dataclass class Person : __skip_recursion__ = ( 'music' ,) name : str age : int music : Music person = Person ( 'John' , age = 40 , music = dict ( name = 'Imagine' ) ) print ( person ) print ( asjson ( person )) Person( 'John', age=40, music=Music(name='Imagine') ) '{\"name\":\"John\",\"age\":40}'","title":"Example for skip fields to recurse"},{"location":"changelog/","text":"","title":"Changelog"}]}