{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"jsondaora Interoperates dataclasses and TypedDict with json objects Documentation : https://dutradda.github.io/jsondaora Source Code : https://github.com/dutradda/jsondaora Key Features Full compatibility with dataclasses module and TypedDict annotation Deserialize values from dict Deserialize values from bytes* Deserialization/serialization of choosen fields Dict serialization Direct json serialization with orjson (don't convert to dict before serialization) Optional validation according with the json-schema specification* * feature in development. Requirements Python 3.8+ orjson for json serialization Instalation $ pip install jsondaora Basic example from dataclasses import dataclass from typing import List , TypedDict from jsondaora import ( as_typed_dict , asdataclass , dataclass_asjson , jsondaora , typed_dict_asjson , ) # dataclass @dataclass class Music : name : str # if 'Person' is not a dataclass the # 'jsondaora' decorator will call the # 'dataclass' decorator @jsondaora class Person : name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = asdataclass ( jsondict , Person ) print ( 'dataclass:' ) print ( person ) print ( dataclass_asjson ( person )) print () # TypedDict @jsondaora class Music ( TypedDict ): name : str # This decorator is required because # we need to track the annotations @jsondaora class Person ( TypedDict ): name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = as_typed_dict ( jsondict , Person ) print ( 'TypedDict:' ) print ( person ) print ( typed_dict_asjson ( person , Person )) dataclass: Person(name='John', age=40, musics=[Music(name='Imagine')]) b'{\"name\":\"John\",\"age\":40,\"musics\":[{\"name\":\"Imagine\"}]}' TypedDict: {'name': 'John', 'age': 40, 'musics': [{'name': 'Imagine'}]} b'{\"name\":\"John\",\"age\":40,\"musics\":[{\"name\":\"Imagine\"}]}' Example for choose fields to deserialize from dataclasses import dataclass from typing import List , TypedDict from jsondaora import ( as_typed_dict , asdataclass , dataclass_asjson , jsondaora , typed_dict_asjson , ) @dataclass class Music : name : str @jsondaora ( deserialize_fields = ( 'name' )) class Person : name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = asdataclass ( jsondict , Person ) print ( 'dataclass:' ) print ( person ) print ( dataclass_asjson ( person )) print () # TypedDict @jsondaora class Music ( TypedDict ): name : str @jsondaora ( deserialize_fields = ( 'name' )) class Person ( TypedDict ): name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = as_typed_dict ( jsondict , Person ) print ( 'TypedDict:' ) print ( person ) print ( typed_dict_asjson ( person , Person )) dataclass: Person(name='John', age='40', musics=[{'name': 'Imagine'}]) b'{\"name\":\"John\",\"age\":\"40\",\"musics\":[{\"name\":\"Imagine\"}]}' TypedDict: {'name': 'John', 'musics': [{'name': 'Imagine'}], 'age': '40'} b'{\"name\":\"John\",\"musics\":[{\"name\":\"Imagine\"}],\"age\":\"40\"}' Example for choose fields to serialize from dataclasses import dataclass from typing import List , TypedDict from jsondaora import ( as_typed_dict , asdataclass , dataclass_asjson , jsondaora , typed_dict_asjson , ) @dataclass class Music : name : str @jsondaora ( serialize_fields = ( 'name' , 'age' )) @dataclass class Person : name : str age : int musics : List [ Music ] jsondict = dict ( name = 'John' , age = 40 , musics = [ dict ( name = 'Imagine' )]) person = asdataclass ( jsondict , Person ) print ( 'dataclass:' ) print ( person ) print ( dataclass_asjson ( person )) print () # TypedDict @jsondaora class Music ( TypedDict ): name : str @jsondaora ( serialize_fields = ( 'age' )) class Person ( TypedDict ): name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = as_typed_dict ( jsondict , Person ) print ( 'TypedDict:' ) print ( person ) print ( typed_dict_asjson ( person , Person )) dataclass: Person(name='John', age=40, musics=[Music(name='Imagine')]) b'{\"age\":40,\"name\":\"John\"}' TypedDict: {'name': 'John', 'age': 40, 'musics': [{'name': 'Imagine'}]} b'{\"age\":40}' Wins Pydantic Benchmark jsondaora is up to 5.6 times faster than pydantic on it's benchmark","title":"jsondaora"},{"location":"#jsondaora","text":"Interoperates dataclasses and TypedDict with json objects Documentation : https://dutradda.github.io/jsondaora Source Code : https://github.com/dutradda/jsondaora","title":"jsondaora"},{"location":"#key-features","text":"Full compatibility with dataclasses module and TypedDict annotation Deserialize values from dict Deserialize values from bytes* Deserialization/serialization of choosen fields Dict serialization Direct json serialization with orjson (don't convert to dict before serialization) Optional validation according with the json-schema specification* * feature in development.","title":"Key Features"},{"location":"#requirements","text":"Python 3.8+ orjson for json serialization","title":"Requirements"},{"location":"#instalation","text":"$ pip install jsondaora","title":"Instalation"},{"location":"#basic-example","text":"from dataclasses import dataclass from typing import List , TypedDict from jsondaora import ( as_typed_dict , asdataclass , dataclass_asjson , jsondaora , typed_dict_asjson , ) # dataclass @dataclass class Music : name : str # if 'Person' is not a dataclass the # 'jsondaora' decorator will call the # 'dataclass' decorator @jsondaora class Person : name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = asdataclass ( jsondict , Person ) print ( 'dataclass:' ) print ( person ) print ( dataclass_asjson ( person )) print () # TypedDict @jsondaora class Music ( TypedDict ): name : str # This decorator is required because # we need to track the annotations @jsondaora class Person ( TypedDict ): name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = as_typed_dict ( jsondict , Person ) print ( 'TypedDict:' ) print ( person ) print ( typed_dict_asjson ( person , Person )) dataclass: Person(name='John', age=40, musics=[Music(name='Imagine')]) b'{\"name\":\"John\",\"age\":40,\"musics\":[{\"name\":\"Imagine\"}]}' TypedDict: {'name': 'John', 'age': 40, 'musics': [{'name': 'Imagine'}]} b'{\"name\":\"John\",\"age\":40,\"musics\":[{\"name\":\"Imagine\"}]}'","title":"Basic example"},{"location":"#example-for-choose-fields-to-deserialize","text":"from dataclasses import dataclass from typing import List , TypedDict from jsondaora import ( as_typed_dict , asdataclass , dataclass_asjson , jsondaora , typed_dict_asjson , ) @dataclass class Music : name : str @jsondaora ( deserialize_fields = ( 'name' )) class Person : name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = asdataclass ( jsondict , Person ) print ( 'dataclass:' ) print ( person ) print ( dataclass_asjson ( person )) print () # TypedDict @jsondaora class Music ( TypedDict ): name : str @jsondaora ( deserialize_fields = ( 'name' )) class Person ( TypedDict ): name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = as_typed_dict ( jsondict , Person ) print ( 'TypedDict:' ) print ( person ) print ( typed_dict_asjson ( person , Person )) dataclass: Person(name='John', age='40', musics=[{'name': 'Imagine'}]) b'{\"name\":\"John\",\"age\":\"40\",\"musics\":[{\"name\":\"Imagine\"}]}' TypedDict: {'name': 'John', 'musics': [{'name': 'Imagine'}], 'age': '40'} b'{\"name\":\"John\",\"musics\":[{\"name\":\"Imagine\"}],\"age\":\"40\"}'","title":"Example for choose fields to deserialize"},{"location":"#example-for-choose-fields-to-serialize","text":"from dataclasses import dataclass from typing import List , TypedDict from jsondaora import ( as_typed_dict , asdataclass , dataclass_asjson , jsondaora , typed_dict_asjson , ) @dataclass class Music : name : str @jsondaora ( serialize_fields = ( 'name' , 'age' )) @dataclass class Person : name : str age : int musics : List [ Music ] jsondict = dict ( name = 'John' , age = 40 , musics = [ dict ( name = 'Imagine' )]) person = asdataclass ( jsondict , Person ) print ( 'dataclass:' ) print ( person ) print ( dataclass_asjson ( person )) print () # TypedDict @jsondaora class Music ( TypedDict ): name : str @jsondaora ( serialize_fields = ( 'age' )) class Person ( TypedDict ): name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = as_typed_dict ( jsondict , Person ) print ( 'TypedDict:' ) print ( person ) print ( typed_dict_asjson ( person , Person )) dataclass: Person(name='John', age=40, musics=[Music(name='Imagine')]) b'{\"age\":40,\"name\":\"John\"}' TypedDict: {'name': 'John', 'age': 40, 'musics': [{'name': 'Imagine'}]} b'{\"age\":40}'","title":"Example for choose fields to serialize"},{"location":"#wins-pydantic-benchmark","text":"jsondaora is up to 5.6 times faster than pydantic on it's benchmark","title":"Wins Pydantic Benchmark"},{"location":"changelog/","text":"","title":"Changelog"},{"location":"features/","text":"jsondaora features jsondaora gives you the following: Same interface as dataclasses module, plus extensions","title":"Features"},{"location":"features/#jsondaora-features","text":"jsondaora gives you the following:","title":"jsondaora features"},{"location":"features/#same-interface-as-dataclasses-module-plus-extensions","text":"","title":"Same interface as dataclasses module, plus extensions"},{"location":"json/","text":"JavaScript Object Notation Introduction from w3schools : - https://www.w3schools.com/js/js_json_intro.asp JSON Schema Official Documentation: - https://json-schema.org","title":"Json intro"},{"location":"json/#javascript-object-notation","text":"Introduction from w3schools : - https://www.w3schools.com/js/js_json_intro.asp","title":"JavaScript Object Notation"},{"location":"json/#json-schema","text":"Official Documentation: - https://json-schema.org","title":"JSON Schema"},{"location":"python-dataclass/","text":"Python 3.7 dataclasses module Official Documentation: - https://docs.python.org/3/library/dataclasses.html Dataclass Benchmark Data types performance comparision: - https://medium.com/@jacktator/dataclass-vs-namedtuple-vs-object-for-performance-optimization-in-python-691e234253b9","title":"Python dataclass intro"},{"location":"python-dataclass/#python-37-dataclasses-module","text":"Official Documentation: - https://docs.python.org/3/library/dataclasses.html","title":"Python 3.7 dataclasses module"},{"location":"python-dataclass/#dataclass-benchmark","text":"Data types performance comparision: - https://medium.com/@jacktator/dataclass-vs-namedtuple-vs-object-for-performance-optimization-in-python-691e234253b9","title":"Dataclass Benchmark"},{"location":"tutorial/custom-data-types/","text":"","title":"Custom Data Types"},{"location":"tutorial/intro/","text":"Tutorial - User Guide - Intro Getting Started Installs $ pip install jsondaora[orjson] Starts coding from dataclasses import dataclass from typing import List , TypedDict from jsondaora import ( as_typed_dict , asdataclass , dataclass_asjson , jsondaora , typed_dict_asjson , ) # dataclass @dataclass class Music : name : str # if 'Person' is not a dataclass the # 'jsondaora' decorator will call the # 'dataclass' decorator @jsondaora class Person : name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = asdataclass ( jsondict , Person ) print ( 'dataclass:' ) print ( person ) print ( dataclass_asjson ( person )) print () # TypedDict @jsondaora class Music ( TypedDict ): name : str # This decorator is required because # we need to track the annotations @jsondaora class Person ( TypedDict ): name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = as_typed_dict ( jsondict , Person ) print ( 'TypedDict:' ) print ( person ) print ( typed_dict_asjson ( person , Person )) dataclass: Person(name='John', age=40, musics=[Music(name='Imagine')]) b'{\"name\":\"John\",\"age\":40,\"musics\":[{\"name\":\"Imagine\"}]}' TypedDict: {'name': 'John', 'age': 40, 'musics': [{'name': 'Imagine'}]} b'{\"name\":\"John\",\"age\":40,\"musics\":[{\"name\":\"Imagine\"}]}'","title":"Introduciton"},{"location":"tutorial/intro/#tutorial-user-guide-intro","text":"","title":"Tutorial - User Guide - Intro"},{"location":"tutorial/intro/#getting-started","text":"","title":"Getting Started"},{"location":"tutorial/intro/#installs","text":"$ pip install jsondaora[orjson]","title":"Installs"},{"location":"tutorial/intro/#starts-coding","text":"from dataclasses import dataclass from typing import List , TypedDict from jsondaora import ( as_typed_dict , asdataclass , dataclass_asjson , jsondaora , typed_dict_asjson , ) # dataclass @dataclass class Music : name : str # if 'Person' is not a dataclass the # 'jsondaora' decorator will call the # 'dataclass' decorator @jsondaora class Person : name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = asdataclass ( jsondict , Person ) print ( 'dataclass:' ) print ( person ) print ( dataclass_asjson ( person )) print () # TypedDict @jsondaora class Music ( TypedDict ): name : str # This decorator is required because # we need to track the annotations @jsondaora class Person ( TypedDict ): name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = as_typed_dict ( jsondict , Person ) print ( 'TypedDict:' ) print ( person ) print ( typed_dict_asjson ( person , Person )) dataclass: Person(name='John', age=40, musics=[Music(name='Imagine')]) b'{\"name\":\"John\",\"age\":40,\"musics\":[{\"name\":\"Imagine\"}]}' TypedDict: {'name': 'John', 'age': 40, 'musics': [{'name': 'Imagine'}]} b'{\"name\":\"John\",\"age\":40,\"musics\":[{\"name\":\"Imagine\"}]}'","title":"Starts coding"}]}